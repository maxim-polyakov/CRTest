import { useState, useEffect, useCallback } from 'react';
import { itemsApi } from '../services/api';
import { useDebounce } from './useDebounce';
import { useInfiniteScroll } from './useInfiniteScroll';
import '../styles.css'

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
    SORT_BY: 'items_sort_by',
    SORT_ORDER: 'items_sort_order',
    SELECTED_ITEMS: 'items_selected',
    ITEM_ORDER: 'items_order'
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadFromStorage = (key, defaultValue) => {
    try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : defaultValue;
    } catch (error) {
        console.error(`Error loading ${key} from storage:`, error);
        return defaultValue;
    }
};

const saveToStorage = (key, value) => {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
        console.error(`Error saving ${key} to storage:`, error);
    }
};

export function useItems() {
    const [items, setItems] = useState([]);
    const [filteredItems, setFilteredItems] = useState([]);
    const [selectedItems, setSelectedItems] = useState(new Set());
    const [searchTerm, setSearchTerm] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [hasMore, setHasMore] = useState(true);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalCount, setTotalCount] = useState(0);
    const [itemOrder, setItemOrder] = useState([]);

    // üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ localStorage
    const [sortBy, setSortBy] = useState(() =>
        loadFromStorage(STORAGE_KEYS.SORT_BY, 'id')
    );
    const [sortOrder, setSortOrder] = useState(() =>
        loadFromStorage(STORAGE_KEYS.SORT_ORDER, 'asc')
    );

    const debouncedSearchTerm = useDebounce(searchTerm, 300);

    // üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        saveToStorage(STORAGE_KEYS.SORT_BY, sortBy);
    }, [sortBy]);

    useEffect(() => {
        saveToStorage(STORAGE_KEYS.SORT_ORDER, sortOrder);
    }, [sortOrder]);

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const applyCustomSorting = useCallback((itemsToSort, customOrder) => {
        if (!customOrder.length || !itemsToSort.length) return itemsToSort;

        const orderMap = new Map();
        customOrder.forEach((id, index) => orderMap.set(id, index));

        return [...itemsToSort].sort((a, b) => {
            const orderA = orderMap.has(a.id) ? orderMap.get(a.id) : Infinity;
            const orderB = orderMap.has(b.id) ? orderMap.get(b.id) : Infinity;
            return orderA - orderB;
        });
    }, []);

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const applySorting = useCallback((itemsToSort, sortBy, sortOrder, itemOrder, searchTerm) => {
        if (!itemsToSort.length) return itemsToSort;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫ - –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if (searchTerm) {
            return itemsToSort;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∏ –µ—Å—Ç—å –ø–æ—Ä—è–¥–æ–∫
        if (sortBy === 'custom' && itemOrder.length > 0) {
            return applyCustomSorting(itemsToSort, itemOrder);
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—è–º
        const sortDirection = sortOrder === 'desc' ? -1 : 1;

        return [...itemsToSort].sort((a, b) => {
            let aValue = a[sortBy];
            let bValue = b[sortBy];

            // Handle undefined values
            if (aValue === undefined || aValue === null) aValue = '';
            if (bValue === undefined || bValue === null) bValue = '';

            // For numeric fields (id, value)
            if (sortBy === 'id' || sortBy === 'value') {
                aValue = Number(aValue) || 0;
                bValue = Number(bValue) || 0;
                return (aValue - bValue) * sortDirection;
            }
            // For string fields (name, description)
            else {
                aValue = String(aValue || '').toLowerCase();
                bValue = String(bValue || '').toLowerCase();
                return aValue.localeCompare(bValue) * sortDirection;
            }
        });
    }, [applyCustomSorting]);

    const loadItems = useCallback(async (page = 1, isNewSearch = false) => {
        if (isLoading) return;

        setIsLoading(true);
        try {
            // üîë –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
            const customOrder = sortBy === 'custom' ? itemOrder : [];

            const response = await itemsApi.getItems(
                page,
                20,
                debouncedSearchTerm,
                sortBy, // üîë –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º 'custom' –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                sortOrder,
                customOrder // üîë –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            );

            let processedItems = response.items;

            // üîë –õ–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª
            if (sortBy === 'custom' && !debouncedSearchTerm && itemOrder.length > 0) {
                processedItems = applyCustomSorting(processedItems, itemOrder);
            }

            if (isNewSearch || page === 1) {
                setItems(processedItems);
                setFilteredItems(processedItems);
            } else {
                const existingIds = new Set(items.map(item => item.id));
                const uniqueNewItems = processedItems.filter(item =>
                    !existingIds.has(item.id)
                );

                if (uniqueNewItems.length !== processedItems.length) {
                    console.warn('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', {
                        received: processedItems.length,
                        added: uniqueNewItems.length
                    });
                }

                setItems(prev => [...prev, ...uniqueNewItems]);
                setFilteredItems(prev => [...prev, ...uniqueNewItems]);
            }

            setHasMore(response.hasMore);
            setCurrentPage(page);
            setTotalCount(response.total);

            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã:', {
                page,
                search: debouncedSearchTerm,
                sortBy,
                sortOrder,
                customOrder: itemOrder.length,
                received: response.items.length,
                total: response.total,
                hasMore: response.hasMore
            });

        } catch (error) {
            console.error('Error loading items:', error);
        } finally {
            setIsLoading(false);
        }
    }, [debouncedSearchTerm, sortBy, sortOrder, isLoading, items, itemOrder, applyCustomSorting]);

    // üîë –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if (items.length > 0) {
            const sortedItems = applySorting(items, sortBy, sortOrder, itemOrder, debouncedSearchTerm);
            setFilteredItems(sortedItems);
        }
    }, [sortBy, sortOrder, itemOrder, debouncedSearchTerm, items, applySorting]);

    const loadMore = useCallback(() => {
        if (hasMore && !isLoading) {
            loadItems(currentPage + 1, false);
        }
    }, [hasMore, isLoading, currentPage, loadItems]);

    useInfiniteScroll(loadMore);

    // üîë –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    useEffect(() => {
        loadItems(1, true);
    }, [debouncedSearchTerm, sortBy, sortOrder]); // üîë –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const loadState = async () => {
            try {
                const state = await itemsApi.getState();

                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                const validSelectedItems = Array.isArray(state.selectedItems)
                    ? state.selectedItems.filter(id => id !== undefined && id !== null)
                    : [];

                setSelectedItems(new Set(validSelectedItems));

                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                const validItemOrder = Array.isArray(state.itemOrder)
                    ? state.itemOrder.filter(id => id !== undefined && id !== null)
                    : [];

                setItemOrder(validItemOrder);

                // üîë –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                const storedSelected = loadFromStorage(STORAGE_KEYS.SELECTED_ITEMS, []);
                if (storedSelected.length > 0) {
                    setSelectedItems(prev => {
                        const newSet = new Set(prev);
                        storedSelected.forEach(id => newSet.add(id));
                        return newSet;
                    });
                }

                const storedOrder = loadFromStorage(STORAGE_KEYS.ITEM_ORDER, []);
                if (storedOrder.length > 0) {
                    setItemOrder(storedOrder);
                }

            } catch (error) {
                console.error('Error loading state:', error);

                // üîë –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
                const storedSelected = loadFromStorage(STORAGE_KEYS.SELECTED_ITEMS, []);
                const storedOrder = loadFromStorage(STORAGE_KEYS.ITEM_ORDER, []);

                setSelectedItems(new Set(storedSelected));
                setItemOrder(storedOrder);
            }
        };

        loadState();
    }, []);

    const toggleSelection = useCallback(async (id) => {
        if (!id) {
            console.error('Attempted to toggle selection with invalid ID:', id);
            return;
        }

        setSelectedItems(prev => {
            const newSelected = new Set(prev);
            if (newSelected.has(id)) {
                newSelected.delete(id);
            } else {
                newSelected.add(id);
            }

            const validSelection = Array.from(newSelected).filter(itemId =>
                itemId !== undefined && itemId !== null
            );

            // üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API –∏ localStorage
            itemsApi.saveSelection(validSelection);
            saveToStorage(STORAGE_KEYS.SELECTED_ITEMS, validSelection);

            return newSelected;
        });
    }, []);

    const toggleSelectAll = useCallback(async (selectAll) => {
        setSelectedItems(prev => {
            const newSelected = new Set(prev);
            const visibleIds = filteredItems
                .map(item => item.id)
                .filter(id => id !== undefined && id !== null);

            if (selectAll) {
                visibleIds.forEach(id => newSelected.add(id));
            } else {
                visibleIds.forEach(id => newSelected.delete(id));
            }

            const validSelection = Array.from(newSelected);

            itemsApi.saveSelection(validSelection);
            saveToStorage(STORAGE_KEYS.SELECTED_ITEMS, validSelection);

            return newSelected;
        });
    }, [filteredItems]);

    const updateItemOrder = useCallback(async (newOrder) => {
        if (!Array.isArray(newOrder)) {
            console.error('Invalid order array:', newOrder);
            return;
        }

        const validOrder = newOrder.filter(id =>
            id !== undefined && id !== null && items.some(item => item.id === id)
        );

        if (validOrder.length !== newOrder.length) {
            console.warn('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ ID –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞:', {
                original: newOrder.length,
                valid: validOrder.length
            });
        }

        setItemOrder(validOrder);

        // üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API –∏ localStorage
        await itemsApi.saveOrder(validOrder);
        saveToStorage(STORAGE_KEYS.ITEM_ORDER, validOrder);

        // üîë –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (sortBy === 'custom') {
            loadItems(1, true);
        }
    }, [items, sortBy, loadItems]);

    const clearSearch = useCallback(() => {
        setSearchTerm('');
    }, []);

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const resetSorting = useCallback(() => {
        setSortBy('id');
        setSortOrder('asc');
    }, []);

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    const clearCustomOrder = useCallback(async () => {
        setItemOrder([]);
        await itemsApi.saveOrder([]);
        saveToStorage(STORAGE_KEYS.ITEM_ORDER, []);

        if (sortBy === 'custom') {
            resetSorting();
        }
    }, [sortBy, resetSorting]);

    // üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    const clearAllStorage = useCallback(async () => {
        Object.values(STORAGE_KEYS).forEach(key => {
            localStorage.removeItem(key);
        });

        setSortBy('id');
        setSortOrder('asc');
        setSelectedItems(new Set());
        setItemOrder([]);

        // –û—á–∏—â–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        await Promise.all([
            itemsApi.saveSelection([]),
            itemsApi.saveOrder([])
        ]);
    }, []);

    const refreshData = useCallback(() => {
        setItems([]);
        setFilteredItems([]);
        setCurrentPage(1);
        loadItems(1, true);
    }, [loadItems]);

    return {
        items: filteredItems,
        selectedItems,
        searchTerm,
        setSearchTerm,
        isLoading,
        hasMore,
        totalCount,
        itemOrder,
        sortBy,
        setSortBy,
        sortOrder,
        setSortOrder,
        toggleSelection,
        toggleSelectAll,
        updateItemOrder,
        clearSearch,
        resetSorting,
        clearCustomOrder,
        clearAllStorage,
        loadMore,
        refreshData
    };
}